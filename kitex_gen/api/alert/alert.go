// Code generated by Kitex v0.0.8. DO NOT EDIT.

package alert

import (
	"Alert_demo/kitex_gen/api"
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return alertServiceInfo
}

var alertServiceInfo = newServiceInfo()

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "Alert"
	handlerType := (*api.Alert)(nil)
	methods := map[string]kitex.MethodInfo{
		"SelectIndicator":     kitex.NewMethodInfo(selectIndicatorHandler, newAlertSelectIndicatorArgs, newAlertSelectIndicatorResult, false),
		"AddSimpleIndicator":  kitex.NewMethodInfo(addSimpleIndicatorHandler, newAlertAddSimpleIndicatorArgs, newAlertAddSimpleIndicatorResult, false),
		"AddComplexIndicator": kitex.NewMethodInfo(addComplexIndicatorHandler, newAlertAddComplexIndicatorArgs, newAlertAddComplexIndicatorResult, false),
		"UpdateIndicator":     kitex.NewMethodInfo(updateIndicatorHandler, newAlertUpdateIndicatorArgs, newAlertUpdateIndicatorResult, false),
		"DeleteIndicator":     kitex.NewMethodInfo(deleteIndicatorHandler, newAlertDeleteIndicatorArgs, newAlertDeleteIndicatorResult, false),
		"SelectRuleById":      kitex.NewMethodInfo(selectRuleByIdHandler, newAlertSelectRuleByIdArgs, newAlertSelectRuleByIdResult, false),
		"SelectRuleByRoomId":  kitex.NewMethodInfo(selectRuleByRoomIdHandler, newAlertSelectRuleByRoomIdArgs, newAlertSelectRuleByRoomIdResult, false),
		"AddRule":             kitex.NewMethodInfo(addRuleHandler, newAlertAddRuleArgs, newAlertAddRuleResult, false),
		"UpdateRule":          kitex.NewMethodInfo(updateRuleHandler, newAlertUpdateRuleArgs, newAlertUpdateRuleResult, false),
		"DeleteRule":          kitex.NewMethodInfo(deleteRuleHandler, newAlertDeleteRuleArgs, newAlertDeleteRuleResult, false),
		"SelectTaskById":      kitex.NewMethodInfo(selectTaskByIdHandler, newAlertSelectTaskByIdArgs, newAlertSelectTaskByIdResult, false),
		"SelectTaskByRoomId":  kitex.NewMethodInfo(selectTaskByRoomIdHandler, newAlertSelectTaskByRoomIdArgs, newAlertSelectTaskByRoomIdResult, false),
		"AddTask":             kitex.NewMethodInfo(addTaskHandler, newAlertAddTaskArgs, newAlertAddTaskResult, false),
		"UpdateTask":          kitex.NewMethodInfo(updateTaskHandler, newAlertUpdateTaskArgs, newAlertUpdateTaskResult, false),
		"DeleteTask":          kitex.NewMethodInfo(deleteTaskHandler, newAlertDeleteTaskArgs, newAlertDeleteTaskResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.0.8",
		Extra:           extra,
	}
	return svcInfo
}

func selectIndicatorHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AlertSelectIndicatorArgs)
	realResult := result.(*api.AlertSelectIndicatorResult)
	success, err := handler.(api.Alert).SelectIndicator(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertSelectIndicatorArgs() interface{} {
	return api.NewAlertSelectIndicatorArgs()
}

func newAlertSelectIndicatorResult() interface{} {
	return api.NewAlertSelectIndicatorResult()
}

func addSimpleIndicatorHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AlertAddSimpleIndicatorArgs)
	realResult := result.(*api.AlertAddSimpleIndicatorResult)
	success, err := handler.(api.Alert).AddSimpleIndicator(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertAddSimpleIndicatorArgs() interface{} {
	return api.NewAlertAddSimpleIndicatorArgs()
}

func newAlertAddSimpleIndicatorResult() interface{} {
	return api.NewAlertAddSimpleIndicatorResult()
}

func addComplexIndicatorHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AlertAddComplexIndicatorArgs)
	realResult := result.(*api.AlertAddComplexIndicatorResult)
	success, err := handler.(api.Alert).AddComplexIndicator(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertAddComplexIndicatorArgs() interface{} {
	return api.NewAlertAddComplexIndicatorArgs()
}

func newAlertAddComplexIndicatorResult() interface{} {
	return api.NewAlertAddComplexIndicatorResult()
}

func updateIndicatorHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AlertUpdateIndicatorArgs)
	realResult := result.(*api.AlertUpdateIndicatorResult)
	success, err := handler.(api.Alert).UpdateIndicator(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertUpdateIndicatorArgs() interface{} {
	return api.NewAlertUpdateIndicatorArgs()
}

func newAlertUpdateIndicatorResult() interface{} {
	return api.NewAlertUpdateIndicatorResult()
}

func deleteIndicatorHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AlertDeleteIndicatorArgs)
	realResult := result.(*api.AlertDeleteIndicatorResult)
	success, err := handler.(api.Alert).DeleteIndicator(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertDeleteIndicatorArgs() interface{} {
	return api.NewAlertDeleteIndicatorArgs()
}

func newAlertDeleteIndicatorResult() interface{} {
	return api.NewAlertDeleteIndicatorResult()
}

func selectRuleByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AlertSelectRuleByIdArgs)
	realResult := result.(*api.AlertSelectRuleByIdResult)
	success, err := handler.(api.Alert).SelectRuleById(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertSelectRuleByIdArgs() interface{} {
	return api.NewAlertSelectRuleByIdArgs()
}

func newAlertSelectRuleByIdResult() interface{} {
	return api.NewAlertSelectRuleByIdResult()
}

func selectRuleByRoomIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AlertSelectRuleByRoomIdArgs)
	realResult := result.(*api.AlertSelectRuleByRoomIdResult)
	success, err := handler.(api.Alert).SelectRuleByRoomId(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertSelectRuleByRoomIdArgs() interface{} {
	return api.NewAlertSelectRuleByRoomIdArgs()
}

func newAlertSelectRuleByRoomIdResult() interface{} {
	return api.NewAlertSelectRuleByRoomIdResult()
}

func addRuleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AlertAddRuleArgs)
	realResult := result.(*api.AlertAddRuleResult)
	success, err := handler.(api.Alert).AddRule(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertAddRuleArgs() interface{} {
	return api.NewAlertAddRuleArgs()
}

func newAlertAddRuleResult() interface{} {
	return api.NewAlertAddRuleResult()
}

func updateRuleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AlertUpdateRuleArgs)
	realResult := result.(*api.AlertUpdateRuleResult)
	success, err := handler.(api.Alert).UpdateRule(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertUpdateRuleArgs() interface{} {
	return api.NewAlertUpdateRuleArgs()
}

func newAlertUpdateRuleResult() interface{} {
	return api.NewAlertUpdateRuleResult()
}

func deleteRuleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AlertDeleteRuleArgs)
	realResult := result.(*api.AlertDeleteRuleResult)
	success, err := handler.(api.Alert).DeleteRule(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertDeleteRuleArgs() interface{} {
	return api.NewAlertDeleteRuleArgs()
}

func newAlertDeleteRuleResult() interface{} {
	return api.NewAlertDeleteRuleResult()
}

func selectTaskByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AlertSelectTaskByIdArgs)
	realResult := result.(*api.AlertSelectTaskByIdResult)
	success, err := handler.(api.Alert).SelectTaskById(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertSelectTaskByIdArgs() interface{} {
	return api.NewAlertSelectTaskByIdArgs()
}

func newAlertSelectTaskByIdResult() interface{} {
	return api.NewAlertSelectTaskByIdResult()
}

func selectTaskByRoomIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AlertSelectTaskByRoomIdArgs)
	realResult := result.(*api.AlertSelectTaskByRoomIdResult)
	success, err := handler.(api.Alert).SelectTaskByRoomId(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertSelectTaskByRoomIdArgs() interface{} {
	return api.NewAlertSelectTaskByRoomIdArgs()
}

func newAlertSelectTaskByRoomIdResult() interface{} {
	return api.NewAlertSelectTaskByRoomIdResult()
}

func addTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AlertAddTaskArgs)
	realResult := result.(*api.AlertAddTaskResult)
	success, err := handler.(api.Alert).AddTask(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertAddTaskArgs() interface{} {
	return api.NewAlertAddTaskArgs()
}

func newAlertAddTaskResult() interface{} {
	return api.NewAlertAddTaskResult()
}

func updateTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AlertUpdateTaskArgs)
	realResult := result.(*api.AlertUpdateTaskResult)
	success, err := handler.(api.Alert).UpdateTask(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertUpdateTaskArgs() interface{} {
	return api.NewAlertUpdateTaskArgs()
}

func newAlertUpdateTaskResult() interface{} {
	return api.NewAlertUpdateTaskResult()
}

func deleteTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.AlertDeleteTaskArgs)
	realResult := result.(*api.AlertDeleteTaskResult)
	success, err := handler.(api.Alert).DeleteTask(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAlertDeleteTaskArgs() interface{} {
	return api.NewAlertDeleteTaskArgs()
}

func newAlertDeleteTaskResult() interface{} {
	return api.NewAlertDeleteTaskResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SelectIndicator(ctx context.Context, req *api.SelectIndicatorRequest) (r *api.SelectIndicatorResponse, err error) {
	var _args api.AlertSelectIndicatorArgs
	_args.Req = req
	var _result api.AlertSelectIndicatorResult
	if err = p.c.Call(ctx, "SelectIndicator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddSimpleIndicator(ctx context.Context, req *api.AddSimpleIndicatorRequest) (r *api.Response, err error) {
	var _args api.AlertAddSimpleIndicatorArgs
	_args.Req = req
	var _result api.AlertAddSimpleIndicatorResult
	if err = p.c.Call(ctx, "AddSimpleIndicator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddComplexIndicator(ctx context.Context, req *api.AddComplexIndicatorRequest) (r *api.Response, err error) {
	var _args api.AlertAddComplexIndicatorArgs
	_args.Req = req
	var _result api.AlertAddComplexIndicatorResult
	if err = p.c.Call(ctx, "AddComplexIndicator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateIndicator(ctx context.Context, req *api.UpdateIndicatorRequest) (r *api.Response, err error) {
	var _args api.AlertUpdateIndicatorArgs
	_args.Req = req
	var _result api.AlertUpdateIndicatorResult
	if err = p.c.Call(ctx, "UpdateIndicator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteIndicator(ctx context.Context, req *api.DeleteIndicatorRequest) (r *api.Response, err error) {
	var _args api.AlertDeleteIndicatorArgs
	_args.Req = req
	var _result api.AlertDeleteIndicatorResult
	if err = p.c.Call(ctx, "DeleteIndicator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SelectRuleById(ctx context.Context, req *api.SelectRuleIdRequest) (r *api.SelectRuleResponse, err error) {
	var _args api.AlertSelectRuleByIdArgs
	_args.Req = req
	var _result api.AlertSelectRuleByIdResult
	if err = p.c.Call(ctx, "SelectRuleById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SelectRuleByRoomId(ctx context.Context, req *api.SelectRuleRoomIdRequest) (r *api.SelectRuleResponse, err error) {
	var _args api.AlertSelectRuleByRoomIdArgs
	_args.Req = req
	var _result api.AlertSelectRuleByRoomIdResult
	if err = p.c.Call(ctx, "SelectRuleByRoomId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddRule(ctx context.Context, req *api.AddRuleRequest) (r *api.Response, err error) {
	var _args api.AlertAddRuleArgs
	_args.Req = req
	var _result api.AlertAddRuleResult
	if err = p.c.Call(ctx, "AddRule", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateRule(ctx context.Context, req *api.UpdateRuleRequest) (r *api.Response, err error) {
	var _args api.AlertUpdateRuleArgs
	_args.Req = req
	var _result api.AlertUpdateRuleResult
	if err = p.c.Call(ctx, "UpdateRule", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteRule(ctx context.Context, req *api.DeleteRuleRequest) (r *api.Response, err error) {
	var _args api.AlertDeleteRuleArgs
	_args.Req = req
	var _result api.AlertDeleteRuleResult
	if err = p.c.Call(ctx, "DeleteRule", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SelectTaskById(ctx context.Context, req *api.SelectTaskIdRequest) (r *api.SelectTaskResponse, err error) {
	var _args api.AlertSelectTaskByIdArgs
	_args.Req = req
	var _result api.AlertSelectTaskByIdResult
	if err = p.c.Call(ctx, "SelectTaskById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SelectTaskByRoomId(ctx context.Context, req *api.SelectTaskRoomIdRequest) (r *api.SelectTasksResponse, err error) {
	var _args api.AlertSelectTaskByRoomIdArgs
	_args.Req = req
	var _result api.AlertSelectTaskByRoomIdResult
	if err = p.c.Call(ctx, "SelectTaskByRoomId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddTask(ctx context.Context, req *api.AddTaskRequest) (r *api.Response, err error) {
	var _args api.AlertAddTaskArgs
	_args.Req = req
	var _result api.AlertAddTaskResult
	if err = p.c.Call(ctx, "AddTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateTask(ctx context.Context, req *api.UpdateTaskRequest) (r *api.Response, err error) {
	var _args api.AlertUpdateTaskArgs
	_args.Req = req
	var _result api.AlertUpdateTaskResult
	if err = p.c.Call(ctx, "UpdateTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteTask(ctx context.Context, req *api.DeleteTaskRequest) (r *api.Response, err error) {
	var _args api.AlertDeleteTaskArgs
	_args.Req = req
	var _result api.AlertDeleteTaskResult
	if err = p.c.Call(ctx, "DeleteTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
